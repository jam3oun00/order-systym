<template>
  <b-row>
    <b-col cols="12">
      <h2>
        Order number {{order_id}}
        <span v-if="external_id"> | Invoice number {{external_id}}</span>
        <span style="font-size:15px; float: right">
          <b-badge class="small ml-1" variant="primary">
            {{ shipping_type }}
          </b-badge>
          <b-badge class="small ml-1" variant="primary">
            {{ order_date }}
          </b-badge>
        </span>
      </h2>

    </b-col>
    <b-col cols="12">
      <b-table
              striped
              hover
              responsive
              :items="shipping"
              :fields="shipping_fields"
              select-mode="single"
              selectable
      >
      </b-table>
    </b-col>
    <!-- <b-col md="2" sm="4" class="my-1">
      <b-form-group class="mb-0">
        <label class="d-inline-block text-sm-left mr-50">Per page</label>
        <b-form-select
          id="perPageSelect"
          v-model="perPage"
          size="sm"
          :options="pageOptions"
          class="w-50"
        />
      </b-form-group>
    </b-col> -->
    <b-col cols="12">
      <b-table
        striped
        hover
        responsive
        :per-page="perPage"
        :current-page="currentPage"
        :items="items"
        :fields="fields"
        select-mode="single"
        selectable
        @row-selected="onRowSelected"
      >
        <!-- <template #cell(avatar)="data">
          <b-avatar :src="data.value" />
        </template> -->
        <template #cell(serial)="data">
          <b-form-input
            type="text"
            v-model="data.value"
            placeholder="Serial"
            @keyup="showSerial(data.value, data.item)"
            @blur="showSerial(data.value, data.item)"
          ></b-form-input>
          <!-- <b-form-input  :value="data.value"></b-form-input> -->
        </template>
        <template #cell(status)="data">
          <b-badge v-if="data.value === 'Unscanned'" variant="primary">
            {{ data.value }}
          </b-badge>
          <b-badge v-if="data.value === 'Scanned'" variant="success">
            {{ data.value }}
          </b-badge>
        </template>
      </b-table>
    </b-col>
    <!-- <b-col cols="6">
      <v-quagga
        class="Show"
        v-bind:class="{ active: isActive }"
        :onDetected="logIt"
        :decodeSingle="logItSingle"
        :readerSize="readerSize"
        :readerType="'ean_reader'"
        :aspectRatio="aspectRatio"
      />
    </b-col> -->

    <!--<b-col cols="12">-->
      <!--<b-pagination-->
        <!--v-model="currentPage"-->
        <!--:total-rows="totalRows"-->
        <!--:per-page="perPage"-->
        <!--align="center"-->
        <!--size="sm"-->
        <!--class="my-0"-->
      <!--/>-->

      <!-- <h2 v-if="barcodeDetected.length > 0">
        {{ barcodeDetected.codeResult.code }}
      </h2>
      <h2 v-if="barcodeSingle.length > 0">
        {{ barcodeSingle.codeResult.code }}
      </h2> -->
    <!--</b-col>-->
    <b-col cols="12">
      <b-button
        block
        size="m"
        class="mr-1"
        align="center"
        variant="primary"
        @click="SendOrder(1)"
        v-if="external_id"
      >
        Create Refund Invoice
      </b-button>
      <b-button
              block
              size="m"
              class="mr-1"
              align="center"
              variant="primary"
              @click="SendOrder"
              v-else
      >
        Create Invoice and Shipping
      </b-button>
    </b-col>
  </b-row>
</template>

<script>
/* eslint-disable */
import {
  BTable,
  BAvatar,
  BBadge,
  BRow,
  BCol,
  BFormGroup,
  BFormSelect,
  BPagination,
  BInputGroup,
  BFormInput,
  BInputGroupAppend,
  BButton
} from "bootstrap-vue";

export default {
  components: {
    BTable,
    BAvatar,
    BBadge,
    BRow,
    BCol,
    BFormGroup,
    BFormSelect,
    BPagination,
    BInputGroup,
    BFormInput,
    BInputGroupAppend,
    BButton
  },
  data() {
    return {
      perPage: 10,
      pageOptions: [3, 5, 10],
      totalRows: 1,
      currentPage: 1,
      order_id : this.$route.params.id,
      external_id : false,
      order_details: "",
      sortBy: "",
      sortDesc: false,
      sortDirection: "asc",
      filter: null,
      filterOn: [],
      payload: {
        order_id: this.$route.params.id,
        items: [
          //{ sku: 123, serial: 1231293 - 123123 }
        ]
      },
      barcodeProcessed: "",
      barcodeDetected: [],
      barcodeSingle: [],
      isActive: false,
      infoModal: {
        id: "info-modal",
        title: "",
        content: ""
      },
      aspectRatio: { min: 1, max: 2 },
      detecteds: [],
      fields: [
        {  key: "id", label: "Num"  },
        {  key: "name",  label: "Product" },
        { key: "sku", label: "SKU" },
        { key: "serial", label: "Serial" },
        { key: "status", label: "Status" }
      ],
      items: [],
      shipping_fields: [
          { key: "first_name", label: "Firstname"  },
          { key: "last_name",  label: "Lastname" },
          { key: "city", label: "City" },
          { key: "address_1", label: "Address 1" },
          { key: "address_2", label: "Address 2" },
          { key: "phone", label: "Phone" }
      ],
      shipping: [],
        shipping_type : '',
        order_date : '',
      status: [
        {
          1: "Unscanned",
          2: "Scanned"
        },
        {
          1: "light-primary",
          2: "light-success"
        }
      ],
      readerSize: {
        width: 640,
        height: 480
      },
      detecteds: []
    };
  },
  computed: {
    sortOptions() {
      // Create an options list from our fields
      return this.fields
        .filter(f => f.sortable)
        .map(f => ({ text: f.label, value: f.key }));
    }
  },

  methods: {
    onRowSelected(items) {
      this.isActive = true;
      console.log("SelectedROw", items);
    },
    logIt(data) {
      console.log("barcode Detected:", data);
      this.barcodeDetected.push(data);
    },
    logItSingle(data) {
      console.log("barcode Single:", data);
      this.barcodeSingle.push(data);
    },
    info(item, index, button) {
      this.infoModal.title = `Row index: ${index}`;
      this.infoModal.content = JSON.stringify(item, null, 2);
      this.$root.$emit("bv::show::modal", this.infoModal.id, button);
    },
    resetInfoModal() {
      this.infoModal.title = "";
      this.infoModal.content = "";
    },
    onFiltered(filteredItems) {
      // Trigger pagination to update the number of buttons/pages due to filtering
      this.totalRows = filteredItems.length;
      this.currentPage = 1;
    },
    showSerial(serial, selectedItem) {
      console.log(`serial`, serial);
      for (let index = 0; index < this.items.length; index++) {
        const element = this.items[index];
        console.log(`element`, element);
        if (element.id == selectedItem.id) {

            element.status = "Scanned";

            let serial_object = { id: selectedItem.id , sku: selectedItem.sku, serial: serial }

            for(let i=0; i < this.payload.items.length;i++) {

                if (selectedItem.id==this.payload.items[i].id) {

                    this.payload.items[i] = serial_object;
                    return;

                }

            }

            this.payload.items.push(serial_object);
        }
      }
    },
    SendOrder(refund='') {

        const order = this.payload;

        let t_dialog = this.$dialog
        let t_router = this.$router;

        t_dialog.confirm('Are you sure you want to continue?')

        .then(function () {

            console.log("Payload", order);

            let order_object = {
                order_id : order.order_id,
                items : order.items,
                token: "iplace-1197-9930-1999",
                refund : refund
            }

            fetch("https://connect.datalogics.co.il/rest/v_set_order_serials", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json"
                },
                body: JSON.stringify(order_object)
            })
            .then(response => response.json())
            .then(data => {

                console.log(`data`, data);

                if (data.success == 1) {

                    //this.$router.push("/");


                    t_dialog.alert(data.msg).then(function(dialog) {

                        t_router.back();

                    });

                } else {

                    t_dialog.alert(data.msg).then(function(dialog) {


                    });

                }

            })
            .catch(error => {
              console.error("Error:", error);
            });
        })
        .catch(function () {
            console.log('Clicked on cancel')
        });
    },
    getOrderId() {

        return this.payload.order_id

    }

  },
  async created() {
    const data = {
      token: "iplace-1197-9930-1999",
      order_id: `${this.$route.params.id}`
    };
    fetch("https://connect.datalogics.co.il/rest/v_get_order", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    })
      .then(response => response.json())
      .then(data => {
        const prod = JSON.parse(data.data);

        this.external_id = prod.external_id;

        const status = { status: "Unscanned" };
        
        this.items = prod.line_items;
        this.items = this.items.map(item => (item = { ...item, ...status }));
        this.totalRows = this.items.length;


          //this.shipping += prod.date_created + ' ';

        if (!prod.shipping.phone) {
            prod.shipping.phone = prod.billing.phone
        }

        this.shipping.push(prod.shipping);

        let cdate = prod.date_created.split("T")

        this.order_date = cdate.join(" ")
        this.shipping_type = prod.shipping_lines[0].method_title;





      })
      .catch(error => {
        console.error("Error:", error);
      });
  },

  // mounted() {
  //   // Set the initial number of items
  //   this.totalRows = this.items.length;
  //   this.items = this.items.filter((item) => item.id == this.$route.params.id);
  // },
};
</script>
<style scoped>
.Show {
  display: block;
}
.active {
  display: none;
}
</style>